{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst User = require('../../server/models/User.js');\n\n// Signup Route\nrouter.post('/', async (req, res) => {\n  const {\n    email,\n    password,\n    name\n  } = req.body;\n  if (!email || !password || !name) {\n    return res.status(400).json({\n      error: 'All fields are required'\n    });\n  }\n  try {\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) return res.status(400).json({\n      error: 'User already exists'\n    });\n    const user = new User({\n      email,\n      password,\n      name\n    });\n    await user.save();\n    req.session.userId = user._id;\n    res.status(201).json({\n      message: 'User registered successfully',\n      user: {\n        id: user._id,\n        email: user.email,\n        name: user.name\n      }\n    });\n  } catch (err) {\n    console.error('Signup Error:', err.message);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","User","post","req","res","email","password","name","body","status","json","error","existingUser","findOne","user","save","session","userId","_id","message","id","err","console","module","exports"],"sources":["C:/Users/Ranga/Documents/ToDo/client/src/Signup.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst User = require('../../server/models/User.js');\r\n\r\n// Signup Route\r\nrouter.post('/', async (req, res) => {\r\n  const { email, password, name } = req.body;\r\n\r\n  if (!email || !password || !name) {\r\n    return res.status(400).json({ error: 'All fields are required' });\r\n  }\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) return res.status(400).json({ error: 'User already exists' });\r\n\r\n    const user = new User({ email, password, name });\r\n    await user.save();\r\n\r\n    req.session.userId = user._id;\r\n    res.status(201).json({\r\n      message: 'User registered successfully',\r\n      user: { id: user._id, email: user.email, name: user.name }\r\n    });\r\n  } catch (err) {\r\n    console.error('Signup Error:', err.message);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,IAAI,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEnD;AACAC,MAAM,CAACG,IAAI,CAAC,GAAG,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAE1C,IAAI,CAACH,KAAK,IAAI,CAACC,QAAQ,IAAI,CAACC,IAAI,EAAE;IAChC,OAAOH,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA0B,CAAC,CAAC;EACnE;EAEA,IAAI;IACF,MAAMC,YAAY,GAAG,MAAMX,IAAI,CAACY,OAAO,CAAC;MAAER;IAAM,CAAC,CAAC;IAClD,IAAIO,YAAY,EAAE,OAAOR,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAsB,CAAC,CAAC;IAE/E,MAAMG,IAAI,GAAG,IAAIb,IAAI,CAAC;MAAEI,KAAK;MAAEC,QAAQ;MAAEC;IAAK,CAAC,CAAC;IAChD,MAAMO,IAAI,CAACC,IAAI,CAAC,CAAC;IAEjBZ,GAAG,CAACa,OAAO,CAACC,MAAM,GAAGH,IAAI,CAACI,GAAG;IAC7Bd,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBS,OAAO,EAAE,8BAA8B;MACvCL,IAAI,EAAE;QAAEM,EAAE,EAAEN,IAAI,CAACI,GAAG;QAAEb,KAAK,EAAES,IAAI,CAACT,KAAK;QAAEE,IAAI,EAAEO,IAAI,CAACP;MAAK;IAC3D,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOc,GAAG,EAAE;IACZC,OAAO,CAACX,KAAK,CAAC,eAAe,EAAEU,GAAG,CAACF,OAAO,CAAC;IAC3Cf,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAe,CAAC,CAAC;EACjD;AACF,CAAC,CAAC;AAEFY,MAAM,CAACC,OAAO,GAAGzB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
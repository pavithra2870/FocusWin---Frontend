{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ranga\\\\Documents\\\\ToDo\\\\client\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Keep this, it's correct!\n\n  useEffect(() => {\n    const checkUserStatus = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/auth/me', {\n          credentials: 'include' // This is correct\n        });\n        if (response.ok) {\n          // This part is correct: user is logged in\n          const userData = await response.json();\n          setIsLoggedIn(true);\n          setUser(userData);\n        } else {\n          // --- CHANGE #1: Handle failed authentication ---\n          // This block is crucial. If the user is not logged in,\n          // we must ensure the state reflects that.\n          setIsLoggedIn(false);\n          setUser(null);\n        }\n      } catch (error) {\n        // --- CHANGE #2: Handle network errors ---\n        // If the backend is down, we should assume the user is logged out.\n        console.error(\"Auth check failed:\", error);\n        setIsLoggedIn(false);\n        setUser(null);\n      } finally {\n        // --- CHANGE #3: Always stop loading ---\n        // This MUST be called at the end, whether the check\n        // succeeded or failed. Otherwise, your app will show \"Loading...\" forever.\n        setLoading(false);\n      }\n    };\n    checkUserStatus();\n  }, []); // The empty array is correct, it makes this run only once.\n\n  const login = userData => {\n    setIsLoggedIn(true);\n    setUser(userData);\n  };\n  const logout = async () => {\n    // This is correct\n    await fetch('http://localhost:5000/api/auth/logout', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    setIsLoggedIn(false);\n    setUser(null);\n    // Optionally, you can force a redirect here if needed\n    // window.location.href = '/login';\n  };\n\n  // --- CHANGE #4: Improved loading display ---\n  // The value is provided to the context\n  const value = {\n    isLoggedIn,\n    user,\n    loading,\n    login,\n    logout\n  };\n\n  // By wrapping children with !loading, we prevent components from rendering\n  // with incorrect auth data before the check is complete.\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"yZDfVBHkRvzBQbg89I5SngvUWfc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","user","setUser","loading","setLoading","checkUserStatus","response","fetch","credentials","ok","userData","json","error","console","login","logout","method","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Ranga/Documents/ToDo/client/src/AuthContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true); // Keep this, it's correct!\r\n\r\n  useEffect(() => {\r\n    const checkUserStatus = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/auth/me', {\r\n          credentials: 'include', // This is correct\r\n        });\r\n\r\n        if (response.ok) {\r\n          // This part is correct: user is logged in\r\n          const userData = await response.json();\r\n          setIsLoggedIn(true);\r\n          setUser(userData);\r\n        } else {\r\n          // --- CHANGE #1: Handle failed authentication ---\r\n          // This block is crucial. If the user is not logged in,\r\n          // we must ensure the state reflects that.\r\n          setIsLoggedIn(false);\r\n          setUser(null);\r\n        }\r\n      } catch (error) {\r\n        // --- CHANGE #2: Handle network errors ---\r\n        // If the backend is down, we should assume the user is logged out.\r\n        console.error(\"Auth check failed:\", error);\r\n        setIsLoggedIn(false);\r\n        setUser(null);\r\n      } finally {\r\n        // --- CHANGE #3: Always stop loading ---\r\n        // This MUST be called at the end, whether the check\r\n        // succeeded or failed. Otherwise, your app will show \"Loading...\" forever.\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkUserStatus();\r\n  }, []); // The empty array is correct, it makes this run only once.\r\n\r\n  const login = (userData) => {\r\n    setIsLoggedIn(true);\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = async () => {\r\n    // This is correct\r\n    await fetch('http://localhost:5000/api/auth/logout', {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n    });\r\n    setIsLoggedIn(false);\r\n    setUser(null);\r\n    // Optionally, you can force a redirect here if needed\r\n    // window.location.href = '/login';\r\n  };\r\n\r\n  // --- CHANGE #4: Improved loading display ---\r\n  // The value is provided to the context\r\n  const value = { isLoggedIn, user, loading, login, logout };\r\n\r\n  // By wrapping children with !loading, we prevent components from rendering\r\n  // with incorrect auth data before the check is complete.\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CE,SAAS,CAAC,MAAM;IACd,MAAMa,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;UAChEC,WAAW,EAAE,SAAS,CAAE;QAC1B,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;UACf;UACA,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UACtCX,aAAa,CAAC,IAAI,CAAC;UACnBE,OAAO,CAACQ,QAAQ,CAAC;QACnB,CAAC,MAAM;UACL;UACA;UACA;UACAV,aAAa,CAAC,KAAK,CAAC;UACpBE,OAAO,CAAC,IAAI,CAAC;QACf;MACF,CAAC,CAAC,OAAOU,KAAK,EAAE;QACd;QACA;QACAC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1CZ,aAAa,CAAC,KAAK,CAAC;QACpBE,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,SAAS;QACR;QACA;QACA;QACAE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMS,KAAK,GAAIJ,QAAQ,IAAK;IAC1BV,aAAa,CAAC,IAAI,CAAC;IACnBE,OAAO,CAACQ,QAAQ,CAAC;EACnB,CAAC;EAED,MAAMK,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB;IACA,MAAMR,KAAK,CAAC,uCAAuC,EAAE;MACnDS,MAAM,EAAE,MAAM;MACdR,WAAW,EAAE;IACf,CAAC,CAAC;IACFR,aAAa,CAAC,KAAK,CAAC;IACpBE,OAAO,CAAC,IAAI,CAAC;IACb;IACA;EACF,CAAC;;EAED;EACA;EACA,MAAMe,KAAK,GAAG;IAAElB,UAAU;IAAEE,IAAI;IAAEE,OAAO;IAAEW,KAAK;IAAEC;EAAO,CAAC;;EAE1D;EACA;EACA,oBACErB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,EAChC,CAACM,OAAO,IAAIN;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAACxB,EAAA,CArEWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAuEzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACI,WAAW,CAAC;AAAA;AAAC8B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}